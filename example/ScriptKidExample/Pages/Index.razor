@page "/"
@inject IScriptEngine scriptEngine


<div class="mb-3">
  <label for="script" class="form-label">Script</label>
  <textarea class="form-control" rows="25" id="script" @bind="@Script" />
</div>

<div class="alert alert-primary" role="alert" hidden="@string.IsNullOrWhiteSpace(Result)">
  @Result
</div>

<div class="alert alert-danger" role="alert" hidden=@string.IsNullOrWhiteSpace(Error)>
    @Error
</div>

<button type="button" class="btn btn-primary" @onclick="RunAsync">Run Script</button>
<button type="button" class="btn btn-warning position-relative" @onclick="CollectionGC">
    Collect GC
     <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
         @WorkingSet
  </span>
</button>

@code{
    private Timer? _timer;

    [Parameter]
    public string? Script { get; set; }=@"return ""Hello World"";";

    [Parameter]
    public string? Error { get; set; }

    [Parameter]
    public string? Result { get; set; }

    [Parameter]
    public string? WorkingSet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _timer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                WorkingSet = GetWorkingSet();
            });
        }, null, 0, 1000);
        WorkingSet = GetWorkingSet();
    }

    public async Task RunAsync()
    {
        Error = null;
        Result = null;

        if (string.IsNullOrWhiteSpace(Script))
        {
            Error="Script is required";
            return;
        }

        try
        {
            var result= await scriptEngine.RunAsync<object>(Script);
            if (result != null)
            {
                Result = JsonSerializer.Serialize(result);
            }
        }
        catch (Exception exception)
        {
            Error = exception.Message;
        }
    }

    public string GetWorkingSet()
    {
        var workingSet = Process.GetCurrentProcess().WorkingSet64;
        return $"{workingSet / 1024 / 1024} MB";
    }

    public void CollectionGC()
    {
        GC.Collect();
        GC.WaitForPendingFinalizers();
    }
}